<?php

/**
 * BaseLanguage
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property string $code
 * @property Doctrine_Collection $Target
 * @property Doctrine_Collection $UserLanguage
 * 
 * @method integer             getId()           Returns the current record's "id" value
 * @method string              getName()         Returns the current record's "name" value
 * @method string              getCode()         Returns the current record's "code" value
 * @method Doctrine_Collection getTarget()       Returns the current record's "Target" collection
 * @method Doctrine_Collection getUserLanguage() Returns the current record's "UserLanguage" collection
 * @method Language            setId()           Sets the current record's "id" value
 * @method Language            setName()         Sets the current record's "name" value
 * @method Language            setCode()         Sets the current record's "code" value
 * @method Language            setTarget()       Sets the current record's "Target" collection
 * @method Language            setUserLanguage() Sets the current record's "UserLanguage" collection
 * 
 * @package    localizit
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseLanguage extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('ohrm_language');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('code', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Target', array(
             'local' => 'id',
             'foreign' => 'languageId'));

        $this->hasMany('UserLanguage', array(
             'local' => 'id',
             'foreign' => 'languageId'));
    }
}